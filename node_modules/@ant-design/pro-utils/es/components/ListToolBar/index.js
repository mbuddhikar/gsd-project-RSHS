import "antd/es/tabs/style";
import _Tabs from "antd/es/tabs";
import "antd/es/divider/style";
import _Divider from "antd/es/divider";
import "antd/es/space/style";
import _Space from "antd/es/space";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";
import "antd/es/input/style";
import _Input from "antd/es/input";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from 'react';
import { useIntl } from '@ant-design/pro-provider';
import classNames from 'classnames';
import { ConfigContext } from 'antd/lib/config-provider';
import HeaderMenu from './HeaderMenu';
import LabelIconTip from '../LabelIconTip';
import './index.less';
var Search = _Input.Search;
/**
 * 获取配置区域 DOM Item
 * @param setting 配置项
 */

function getSettingItem(setting) {
  if (React.isValidElement(setting)) {
    return setting;
  }

  if (setting) {
    var settingConfig = setting;
    var icon = settingConfig.icon,
        tooltip = settingConfig.tooltip,
        _onClick = settingConfig.onClick,
        key = settingConfig.key;

    if (icon && tooltip) {
      return /*#__PURE__*/React.createElement(_Tooltip, {
        title: tooltip
      }, /*#__PURE__*/React.createElement("span", {
        key: key,
        onClick: function onClick() {
          if (_onClick) {
            _onClick(key);
          }
        }
      }, icon));
    }

    return icon;
  }

  return null;
}

var ListToolBar = function ListToolBar(_ref) {
  var customizePrefixCls = _ref.prefixCls,
      title = _ref.title,
      subTitle = _ref.subTitle,
      tip = _ref.tip,
      tooltip = _ref.tooltip,
      className = _ref.className,
      style = _ref.style,
      search = _ref.search,
      onSearch = _ref.onSearch,
      _ref$multipleLine = _ref.multipleLine,
      multipleLine = _ref$multipleLine === void 0 ? false : _ref$multipleLine,
      filter = _ref.filter,
      _ref$actions = _ref.actions,
      actions = _ref$actions === void 0 ? [] : _ref$actions,
      _ref$settings = _ref.settings,
      settings = _ref$settings === void 0 ? [] : _ref$settings,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? {} : _ref$tabs,
      menu = _ref.menu;
  var intl = useIntl();
  /**
   * 获取搜索栏 DOM
   * @param search 搜索框相关配置
   */

  var getSearchInput = function getSearchInput(searchObject) {
    if (React.isValidElement(searchObject)) {
      return searchObject;
    }

    if (searchObject) {
      var searchProps = _objectSpread({
        placeholder: intl.getMessage('tableForm.inputPlaceholder', '请输入'),
        style: {
          width: 200
        },
        onSearch: onSearch
      }, searchObject);

      return /*#__PURE__*/React.createElement(Search, searchProps);
    }

    return null;
  };

  var _useContext = useContext(ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-core-toolbar', customizePrefixCls);
  var hasDivider = settings.length > 0 && (actions.length || search);
  var searchNode = getSearchInput(search);
  var filtersNode = filter ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-filter")
  }, filter) : null;
  var hasTitle = menu || title || subTitle || tooltip || tip;
  return /*#__PURE__*/React.createElement("div", {
    style: style,
    className: classNames("".concat(prefixCls), className)
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, menu && /*#__PURE__*/React.createElement(HeaderMenu, _extends({}, menu, {
    prefixCls: prefixCls
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, /*#__PURE__*/React.createElement(LabelIconTip, {
    tooltip: tooltip || tip,
    label: title,
    subTitle: subTitle
  })), !hasTitle && searchNode && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-search")
  }, searchNode)), /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-right")
  }, hasTitle && searchNode && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-search")
  }, searchNode), !multipleLine && filtersNode, /*#__PURE__*/React.createElement(_Space, null, actions), hasDivider && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-divider")
  }, /*#__PURE__*/React.createElement(_Divider, {
    type: "vertical"
  })), settings.map(function (setting, index) {
    var settingItem = getSettingItem(setting);
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: "".concat(prefixCls, "-setting-item")
    }, settingItem);
  }))), multipleLine && /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-extra-line")
  }, tabs.items && tabs.items.length ? /*#__PURE__*/React.createElement(_Tabs, {
    onChange: tabs.onChange,
    tabBarExtraContent: filtersNode
  }, tabs.items.map(function (tab) {
    return /*#__PURE__*/React.createElement(_Tabs.TabPane, tab);
  })) : filtersNode));
};

export default ListToolBar;