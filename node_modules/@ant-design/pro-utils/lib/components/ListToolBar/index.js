"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("antd/es/tabs/style");

var _tabs = _interopRequireDefault(require("antd/es/tabs"));

require("antd/es/divider/style");

var _divider = _interopRequireDefault(require("antd/es/divider"));

require("antd/es/space/style");

var _space = _interopRequireDefault(require("antd/es/space"));

require("antd/es/tooltip/style");

var _tooltip = _interopRequireDefault(require("antd/es/tooltip"));

require("antd/es/input/style");

var _input = _interopRequireDefault(require("antd/es/input"));

var _react = _interopRequireWildcard(require("react"));

var _proProvider = require("@ant-design/pro-provider");

var _classnames = _interopRequireDefault(require("classnames"));

var _configProvider = require("antd/lib/config-provider");

var _HeaderMenu = _interopRequireDefault(require("./HeaderMenu"));

var _LabelIconTip = _interopRequireDefault(require("../LabelIconTip"));

require("./index.less");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Search = _input.default.Search;
/**
 * 获取配置区域 DOM Item
 * @param setting 配置项
 */

function getSettingItem(setting) {
  if (_react.default.isValidElement(setting)) {
    return setting;
  }

  if (setting) {
    var settingConfig = setting;
    var icon = settingConfig.icon,
        tooltip = settingConfig.tooltip,
        _onClick = settingConfig.onClick,
        key = settingConfig.key;

    if (icon && tooltip) {
      return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        title: tooltip
      }, /*#__PURE__*/_react.default.createElement("span", {
        key: key,
        onClick: function onClick() {
          if (_onClick) {
            _onClick(key);
          }
        }
      }, icon));
    }

    return icon;
  }

  return null;
}

var ListToolBar = function ListToolBar(_ref) {
  var customizePrefixCls = _ref.prefixCls,
      title = _ref.title,
      subTitle = _ref.subTitle,
      tip = _ref.tip,
      tooltip = _ref.tooltip,
      className = _ref.className,
      style = _ref.style,
      search = _ref.search,
      onSearch = _ref.onSearch,
      _ref$multipleLine = _ref.multipleLine,
      multipleLine = _ref$multipleLine === void 0 ? false : _ref$multipleLine,
      filter = _ref.filter,
      _ref$actions = _ref.actions,
      actions = _ref$actions === void 0 ? [] : _ref$actions,
      _ref$settings = _ref.settings,
      settings = _ref$settings === void 0 ? [] : _ref$settings,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? {} : _ref$tabs,
      menu = _ref.menu;
  var intl = (0, _proProvider.useIntl)();
  /**
   * 获取搜索栏 DOM
   * @param search 搜索框相关配置
   */

  var getSearchInput = function getSearchInput(searchObject) {
    if (_react.default.isValidElement(searchObject)) {
      return searchObject;
    }

    if (searchObject) {
      var searchProps = _objectSpread({
        placeholder: intl.getMessage('tableForm.inputPlaceholder', '请输入'),
        style: {
          width: 200
        },
        onSearch: onSearch
      }, searchObject);

      return /*#__PURE__*/_react.default.createElement(Search, searchProps);
    }

    return null;
  };

  var _useContext = (0, _react.useContext)(_configProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var prefixCls = getPrefixCls('pro-core-toolbar', customizePrefixCls);
  var hasDivider = settings.length > 0 && (actions.length || search);
  var searchNode = getSearchInput(search);
  var filtersNode = filter ? /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-filter")
  }, filter) : null;
  var hasTitle = menu || title || subTitle || tooltip || tip;
  return /*#__PURE__*/_react.default.createElement("div", {
    style: style,
    className: (0, _classnames.default)("".concat(prefixCls), className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-container")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-left")
  }, menu && /*#__PURE__*/_react.default.createElement(_HeaderMenu.default, _extends({}, menu, {
    prefixCls: prefixCls
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-title")
  }, /*#__PURE__*/_react.default.createElement(_LabelIconTip.default, {
    tooltip: tooltip || tip,
    label: title,
    subTitle: subTitle
  })), !hasTitle && searchNode && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-search")
  }, searchNode)), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-right")
  }, hasTitle && searchNode && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-search")
  }, searchNode), !multipleLine && filtersNode, /*#__PURE__*/_react.default.createElement(_space.default, null, actions), hasDivider && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-divider")
  }, /*#__PURE__*/_react.default.createElement(_divider.default, {
    type: "vertical"
  })), settings.map(function (setting, index) {
    var settingItem = getSettingItem(setting);
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "".concat(prefixCls, "-setting-item")
    }, settingItem);
  }))), multipleLine && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(prefixCls, "-extra-line")
  }, tabs.items && tabs.items.length ? /*#__PURE__*/_react.default.createElement(_tabs.default, {
    onChange: tabs.onChange,
    tabBarExtraContent: filtersNode
  }, tabs.items.map(function (tab) {
    return /*#__PURE__*/_react.default.createElement(_tabs.default.TabPane, tab);
  })) : filtersNode));
};

var _default = ListToolBar;
exports.default = _default;